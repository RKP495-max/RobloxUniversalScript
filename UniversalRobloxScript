-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Lighting = game:GetService("Lighting")

-- Configuration Variables
local contourColor = Color3.fromRGB(255, 0, 0)
local contourTransparency = 0.5
local nameTagSize = 14  -- Adjusted size
local aimAssistRange = 100
local walkSpeed = 16  -- Default walk speed

-- Menu Variables
local espEnabled = false
local aimbotEnabled = false
local fullbrightEnabled = false
local infiniteJumpEnabled = false
local lightingOriginalSettings = {}

-- Save the original lighting settings
local function saveLightingSettings()
    lightingOriginalSettings = {
        Brightness = Lighting.Brightness,
        ClockTime = Lighting.ClockTime,
        FogEnd = Lighting.FogEnd,
        GlobalShadows = Lighting.GlobalShadows,
        OutdoorAmbient = Lighting.OutdoorAmbient
    }
end

-- Apply Fullbright settings
local function applyFullbright()
    if fullbrightEnabled then
        Lighting.Brightness = 2
        Lighting.ClockTime = 12
        Lighting.FogEnd = 100000
        Lighting.GlobalShadows = false
        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)  -- Neutral gray
    else
        -- Restore original lighting settings
        Lighting.Brightness = lightingOriginalSettings.Brightness
        Lighting.ClockTime = lightingOriginalSettings.ClockTime
        Lighting.FogEnd = lightingOriginalSettings.FogEnd
        Lighting.GlobalShadows = lightingOriginalSettings.GlobalShadows
        Lighting.OutdoorAmbient = lightingOriginalSettings.OutdoorAmbient
    end
end

-- Toggle Fullbright
local function toggleFullbright()
    fullbrightEnabled = not fullbrightEnabled
    applyFullbright()
    print("Fullbright " .. (fullbrightEnabled and "Enabled" or "Disabled"))
end

-- Toggle ESP
local function toggleESP()
    espEnabled = not espEnabled
    print("ESP " .. (espEnabled and "Enabled" or "Disabled"))

    -- Update the ESP status for all players
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if espEnabled then
                createESP(player)
            else
                removeESP(player)
            end
        end
    end

    -- Update the menu button text to reflect the new state
    local menuGui = LocalPlayer.PlayerGui:FindFirstChild("MenuGui")
    if menuGui then
        local espButton = menuGui:FindFirstChild("ESPButton")
        if espButton then
            espButton.Text = "ESP (" .. (espEnabled and "On" or "Off") .. ")"
        end
    end
end

-- Toggle Aimbot
local function toggleAimbot()
    aimbotEnabled = not aimbotEnabled
    print("Aimbot " .. (aimbotEnabled and "Enabled" or "Disabled"))
end

-- Toggle Infinite Jump
local function toggleInfiniteJump()
    infiniteJumpEnabled = not infiniteJumpEnabled
    print("Infinite Jump " .. (infiniteJumpEnabled and "Enabled" or "Disabled"))
    
    -- Enable or disable infinite jump functionality
    if infiniteJumpEnabled then
        local player = Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChildOfClass('Humanoid')
        
        if not humanoid then
            player.CharacterAdded:Wait()
            humanoid = player.Character:FindFirstChildOfClass('Humanoid')
        end

        local function onJumpRequest()
            if infiniteJumpEnabled and humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                humanoid:ChangeState(Enum.HumanoidStateType.Seated)
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end

        local userInputService = game:GetService("UserInputService")
        userInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode.Space then
                onJumpRequest()
            end
        end)
    end
end

-- Function to create ESP elements for a player
local function createESP(player)
    local function setupCharacter(character)
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end

        -- Remove existing ESP if present
        local existingHighlight = character:FindFirstChild("ESP_Highlight")
        if existingHighlight then
            existingHighlight:Destroy()
        end

        -- Create a Highlight instance for the character
        local highlight = Instance.new("Highlight")
        highlight.Name = "ESP_Highlight"
        highlight.Adornee = character
        highlight.FillTransparency = 1
        highlight.OutlineTransparency = contourTransparency
        highlight.OutlineColor = contourColor
        highlight.Parent = character

        -- Create a BillboardGui for the name tag
        local head = character:FindFirstChild("Head")
        if head then
            local nameTag = Instance.new("BillboardGui")
            nameTag.Name = "ESP_NameTag"
            nameTag.Adornee = head
            nameTag.Size = UDim2.new(0, 50, 0, 50)  -- Adjusted size
            nameTag.AlwaysOnTop = true
            nameTag.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
            nameTag.Parent = head

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Text = player.Name
            nameLabel.Size = UDim2.new(1, 0, 1, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            nameLabel.TextStrokeTransparency = 0
            nameLabel.TextSize = nameTagSize
            nameLabel.TextScaled = true
            nameLabel.Parent = nameTag
        end
    end

    if player.Character then
        setupCharacter(player.Character)
    end

    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("HumanoidRootPart")
        wait(1)
        if espEnabled then
            setupCharacter(character)
        end
    end)
end

-- Function to remove ESP elements for a player
local function removeESP(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChild("ESP_Highlight")
        if highlight then
            highlight:Destroy()
        end
        local head = character:FindFirstChild("Head")
        if head then
            local nameTag = head:FindFirstChild("ESP_NameTag")
            if nameTag then
                nameTag:Destroy()
            end
        end
    end
end

-- Function to get the closest target to the cursor
local function getClosestTargetToCursor()
    local mouseLocation = UserInputService:GetMouseLocation()
    local closestTarget = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local screenPoint, onScreen = Camera:WorldToScreenPoint(player.Character.Head.Position)
            if onScreen then
                local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - mouseLocation).Magnitude
                if distance < shortestDistance then
                    closestTarget = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestTarget
end

-- Function to aim at the closest target to the cursor
local function aimAtTarget()
    local target = getClosestTargetToCursor()
    if target and target.Character and target.Character:FindFirstChild("Head") then
        local targetPos = target.Character.Head.Position
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
    end
end

-- Update Aimbot based on RMB
RunService.RenderStepped:Connect(function()
    if aimbotEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
        aimAtTarget()
    end
end)

-- Update ESP and Fullbright based on toggles
RunService.RenderStepped:Connect(function()
    if espEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and not player.Character:FindFirstChild("ESP_Highlight") then
                createESP(player)
            end
        end
    else
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                removeESP(player)
            end
        end
    end
    applyFullbright()
end)

-- Create the menu
local function createMenu()
    -- Check if the menu already exists
    local existingMenu = LocalPlayer.PlayerGui:FindFirstChild("MenuGui")
    if existingMenu then
        return
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MenuGui"
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local menuFrame = Instance.new("Frame")
    menuFrame.Size = UDim2.new(0, 300, 0, 400)  -- Increased size
    menuFrame.Position = UDim2.new(0, 20, 0, 200)  -- Adjusted position
    menuFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    menuFrame.BorderSizePixel = 0
    menuFrame.Parent = screenGui

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Text = "Features Menu"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 20
    titleLabel.TextStrokeTransparency = 0
    titleLabel.Parent = menuFrame

    -- Toggle Fullbright Button
    local toggleFullbrightButton = Instance.new("TextButton")
    toggleFullbrightButton.Size = UDim2.new(1, 0, 0, 50)  -- Increased button size
    toggleFullbrightButton.Position = UDim2.new(0, 0, 0.1, 0)
    toggleFullbrightButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    toggleFullbrightButton.BorderSizePixel = 0
    toggleFullbrightButton.Text = "Fullbright (Off)"
    toggleFullbrightButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleFullbrightButton.TextSize = 16
    toggleFullbrightButton.Parent = menuFrame

    toggleFullbrightButton.MouseButton1Click:Connect(function()
        toggleFullbright()
        toggleFullbrightButton.Text = "Fullbright (" .. (fullbrightEnabled and "On" or "Off") .. ")"
    end)

    -- Toggle ESP Button
    local espButton = Instance.new("TextButton")
    espButton.Name = "ESPButton"
    espButton.Size = UDim2.new(1, 0, 0, 50)  -- Increased button size
    espButton.Position = UDim2.new(0, 0, 0.2, 0)
    espButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    espButton.BorderSizePixel = 0
    espButton.Text = "ESP (Off)"
    espButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    espButton.TextSize = 16
    espButton.Parent = menuFrame

    espButton.MouseButton1Click:Connect(toggleESP)

    -- Toggle Aimbot Button
    local aimbotButton = Instance.new("TextButton")
    aimbotButton.Size = UDim2.new(1, 0, 0, 50)  -- Increased button size
    aimbotButton.Position = UDim2.new(0, 0, 0.3, 0)
    aimbotButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    aimbotButton.BorderSizePixel = 0
    aimbotButton.Text = "Aimbot (Off)"
    aimbotButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    aimbotButton.TextSize = 16
    aimbotButton.Parent = menuFrame

    aimbotButton.MouseButton1Click:Connect(function()
        toggleAimbot()
        aimbotButton.Text = "Aimbot (" .. (aimbotEnabled and "On" or "Off") .. ")"
    end)

    -- Toggle Infinite Jump Button
    local infiniteJumpButton = Instance.new("TextButton")
    infiniteJumpButton.Size = UDim2.new(1, 0, 0, 50)  -- Increased button size
    infiniteJumpButton.Position = UDim2.new(0, 0, 0.4, 0)
    infiniteJumpButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    infiniteJumpButton.BorderSizePixel = 0
    infiniteJumpButton.Text = "Infinite Jump (Off)"
    infiniteJumpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    infiniteJumpButton.TextSize = 16
    infiniteJumpButton.Parent = menuFrame

    infiniteJumpButton.MouseButton1Click:Connect(function()
        toggleInfiniteJump()
        infiniteJumpButton.Text = "Infinite Jump (" .. (infiniteJumpEnabled and "On" or "Off") .. ")"
    end)

    -- Walk Speed Slider
    local walkSpeedSlider = Instance.new("Frame")
    walkSpeedSlider.Size = UDim2.new(1, 0, 0, 60)  -- Increased slider size
    walkSpeedSlider.Position = UDim2.new(0, 0, 0.5, 0)
    walkSpeedSlider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    walkSpeedSlider.BorderSizePixel = 0
    walkSpeedSlider.Parent = menuFrame

    local walkSpeedLabel = Instance.new("TextLabel")
    walkSpeedLabel.Size = UDim2.new(1, 0, 0.5, 0)
    walkSpeedLabel.BackgroundTransparency = 1
    walkSpeedLabel.Text = "Walk Speed: " .. walkSpeed
    walkSpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    walkSpeedLabel.TextSize = 16
    walkSpeedLabel.Parent = walkSpeedSlider

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0.5, 0)
    sliderBar.Position = UDim2.new(0, 0, 0.5, 0)
    sliderBar.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = walkSpeedSlider

    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(0.5, 0, 1, 0)
    slider.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    slider.BorderSizePixel = 0
    slider.Parent = sliderBar

    local dragging = false

    local function updateWalkSpeed()
        walkSpeedLabel.Text = "Walk Speed: " .. math.floor(walkSpeed)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
            LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeed
        end
    end

    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local function onMove(moveInput)
                if dragging then
                    local newWalkSpeed = math.clamp((moveInput.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X * 100, 16, 100)
                    walkSpeed = newWalkSpeed
                    slider.Size = UDim2.new(newWalkSpeed / 100, 0, 1, 0)
                    updateWalkSpeed()
                end
            end

            UserInputService.InputChanged:Connect(onMove)
        end
    end)

    sliderBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Add drag functionality
    local draggingMenu = false
    local dragInput
    local dragStart
    local startPos

    local function updateMenuPosition(input)
        local delta = input.Position - dragStart
        menuFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingMenu = true
            dragStart = input.Position
            startPos = menuFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingMenu = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if draggingMenu and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateMenuPosition(input)
        end
    end)

    -- Initialize Fullbright settings
    saveLightingSettings()
    applyFullbright()
end

-- Create the menu when the script runs
createMenu()
